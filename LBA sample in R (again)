;; this is by someone else (generally just helps us make sense of what he is doing) 
;; the original repo is tsdfish/SequentialSamplingModels.jl

The Linear Ballistic Accumulator (LBA; Brown & Heathcote, 2008) is a sequential sampling model in which evidence for options races independently. The LBA makes an additional simplification that evidence accumulates in a linear and ballistic fashion, meaning there is no intra-trial noise. Instead, evidence accumulates deterministically and linearly until it hits the threshold.

Example
In this example, we will demonstrate how to use the LBA in a generic two alternative forced choice task.

Load Packages
The first step is to load the required packages.

using SequentialSamplingModels
using Plots
using Random

Random.seed!(8741)

Random.TaskLocalRNG()

Create Model Object
In the code below, we will define parameters for the LBA and create a model object to store the parameter values.

Drift Rates
The drift rates control the speed with which information accumulates. Typically, there is one drift rate per option.

ν=[2.75,1.75]

2-element Vector{Float64}:
 2.75
 1.75

Maximum Starting Point
The starting point of each accumulator is sampled uniformly between 
[
0
,
�
]
[0,A].

A = 0.80

0.8

Threshold - Maximum Starting Point
Evidence accumulates until accumulator reaches a threshold 
�
=
�
+
�
α=k+A. The threshold is parameterized this way to faciliate parameter estimation and to ensure that 
�
≤
�
A≤α.

k = 0.50

0.5

Non-Decision Time
Non-decision time is an additive constant representing encoding and motor response time.

τ = 0.30

0.3

LBA Constructor
Now that values have been asigned to the parameters, we will pass them to LBA to generate the model object.

dist = LBA(; ν, A, k, τ)

LBA
┌───────────┬──────────────┐
│ Parameter │ Value        │
├───────────┼──────────────┤
│ ν         │ [2.75, 1.75] │
│ A         │  0.80        │
│ k         │  0.50        │
│ τ         │  0.30        │
│ σ         │  1.00        │
└───────────┴──────────────┘

Simulate Model
Now that the model is defined, we will generate 
10
,
000
10,000 choices and reaction times using rand.

 choices,rts = rand(dist, 10_000)

(choice = [1, 1, 2, 1, 1, 2, 2, 1, 1, 1  …  2, 1, 1, 1, 1, 2, 1, 1, 1, 1], rt = [0.46901081359730046, 0.5382866317379926, 0.5680330833450193, 0.6026843913170301, 0.5693248772513073, 0.9735648559773147, 0.5322274806898473, 0.5493609964658215, 0.785941116807848, 0.5869078648348688  …  0.6065484757277073, 0.8402820811198233, 0.48671312915228715, 0.45481878731935993, 0.603574654182435, 0.6674503107854755, 0.772047819452796, 0.6707045956238078, 0.4665734019291022, 0.44462994269424955])

ction Time", ylabel="Density", xlims = (0,1.5))
histogram!(rts1, subplot=1, color=:grey, bins = 200, norm=true, title="Choice 1")
plot!(t_range, pdf1, subplot=1, color=:darkorange, linewidth=2)
histogram!(rts2, subplot=2, color=:grey, bins = 150, norm=true, title="Choice 2")
plot!(t_range, pdf2, subplot=2, color=:darkorange, linewidth=2)
# weight histogram according to choice probability
hist[1][1][:y] *= p1
hist[2][1][:y] *= (1 - p1)
hist
